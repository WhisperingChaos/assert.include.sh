#!/bin/bash
# source commands reflect working directory location containng example.source_test.sh
# within assert.source.sh repo.
source base/assert.source.sh
source example.source.sh

test_assert(){
	local hostName="hNmGood1"
	# affirm environment variable value.
	# should succeed.
	assert_true '[ "$hostName" == '\''hNmGood1'\'' ]'
	# affirm environment variable value isn't 'hNmGood1'.
	# should fail.
	assert_false '[ "$hostName" == '\''hNmGood1'\'' ]'
	# affirm return code for function hostNameVerify is true when compliant
	# hostname supplied.
	# should succeed.
	assert_true 'hostNameVerify "$hostName"'
	# affirm no output from either STDERR or STEOUT when
	# compliant hostname supplied.
	# should succeed.
	# note - assert_true forwards the result of assert_output_true.
	# it doesn't check the return code of hostNameVerify.
	assert_true 'hostNameVerify "$hostName" 2>&1 | assert_output_true'
	# alternate form of assert_output_true where it executes in process.
	# should succeed.
	# is equivalent to immediately prior assert_true code.
	assert_output_true --- hostNameVerify "$hostName" 
	# affirm hostNameVerify returns false and generates an appropriate error.
	# should succeed.
	# relies on side effect if assertion fails as its failure will produce
	# error messages that are captured and compared to the expected set. since
	# assertion failure messages generally don't appear in expected output
	# the output generated by assert_false's failure results in the cascading
	# failure of assert_output_true.
	assert_output_true echo "Error: hostName='bad' length=3 less than minAllowed=4" \
		--- assert_false 'hostNameVerify "bad"'
	# affirm hostNameVerify returns true and generates no output.
	# should fail.
	# relies on side effect when assertion fails as it will produce error
	# messages that are captured and compared to the expected set. since
	# assertion failure messages generally don't appear in expected output
	# the output generated by assert_true's failure results in the cascading
	# failure of assert_output_true
	assert_output_true --- assert_true 'hostNameVerify "bad"'
	# affirm hostNameVerify returns at least some output.
	# should succeed.
	assert_output_false --- assert_true 'hostNameVerify "bad"'

}

test_assert_child_process(){
	assert_return_code_child_failure_relay 'test_assert_child_process_run'
}

test_assert_child_process_run()(
	# initiate function as child process.  Notice function body defined within "()" instead of "{}".
	# Bash (Linux) starts child process with nearly exact state of parent.  Linux uses Copy On Write
	# (https://en.wikipedia.org/wiki/Copy-on-write) mechanism to shield parent process from memory updates
	# performed by the child.  Therefore, assert_ invocations in this child process fail to affect the state
	# of the assert_ package active in the parent.

	# raise an assertion.
	assert_true false
	# communicate failure to parent process by setting the return code according to the assert package instance
	# running within this child.
	assert_return_code_set	
)


main(){
	test_assert
	test_assert_child_process
	assert_return_code_set	
}
main
